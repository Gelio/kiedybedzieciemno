/** üáµüá± Piszƒô poprawnie po polsku üáµüá± */

const zdobƒÖd≈∫LokalizacjƒôU≈ºytkownika = () => {
    return new Promise((resolve, reject) => {
        navigator.geolocation.getCurrentPosition(resolve, reject);
    })
}

const zdobƒÖd≈∫DatƒôZmierzchuCywilnego = async (d≈Çugo≈õƒá, szeroko≈õƒá) => {
    const adres = `https://api.sunrise-sunset.org/json?lat=${szeroko≈õƒá}&lng=${d≈Çugo≈õƒá}&formatted=0`;
    const odpowied≈∫ = await fetch(adres);
    const tre≈õƒáOdpowiedzi = await odpowied≈∫.json();
    console.log('tre≈õƒáOdpowiedzi:', tre≈õƒáOdpowiedzi)
    return new Date(tre≈õƒáOdpowiedzi.results.civil_twilight_end);
}

/** @param data {Date} */
const ustawGodzinƒôWHtmlu = (data) => {
    document.getElementById('zdanie').innerHTML = 'Dzisiaj bƒôdzie ciemno od';
    document.getElementById('czas-zmierzchu-cywilnego').innerHTML = data.toLocaleTimeString();
}

const g≈Ç√≥wnaFunkcja = async () => {
    const lokalizacja = (await zdobƒÖd≈∫LokalizacjƒôU≈ºytkownika()).coords;
    console.log('dok≈Çadno≈õƒá:', lokalizacja.accuracy, 'm');
    console.log('szeroko≈õƒá:', lokalizacja.latitude);
    console.log('d≈Çugo≈õƒá:', lokalizacja.longitude);
    const dataZaj≈õciaS≈Ço≈Ñca = await zdobƒÖd≈∫DatƒôZmierzchuCywilnego(lokalizacja.latitude, lokalizacja.longitude);
    ustawGodzinƒôWHtmlu(dataZaj≈õciaS≈Ço≈Ñca);
}

g≈Ç√≥wnaFunkcja().then(() => {}).catch(b≈Ç => console.error(b≈Ç));

/** **** *** */